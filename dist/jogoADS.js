"use strict";
let nickjogo = 'Dragon Egg';
let nomeguerreiro = null;
let qporcoes = 4;
let controlarAcesso = 1;
let continuar;
let escolherTurno;
// Chamando a fun√ß√£o DragonEgg - fun√ß√£o principal
DragonEgg();
/** ...
 * A fun√ß√£o nomeGuerreiro obriga o jogador a digitar uma informa√ß√£o. Qualquer valor √© aceito.
 * Sem retorno
 */
function nomeGuerreiro() {
    while (!nomeguerreiro) {
        nomeguerreiro = prompt('Para iniciar o game, digite seu nome e clique em OK.');
        if (!nomeguerreiro) {
            alert('Por favor, digite um nome para continuar o jogo.');
        }
    }
}
/** ...
 * A fun√ß√£o introdu√ß√£o como o nome j√° diz √© respons√°vel por introduzir o jogador no mundo do game.
 * Sem retorno
 */
function introducao() {
    alert('Seja Bem-Vindo ao Game ' + nickjogo + ', ' + nomeguerreiro + '!' + '\nVoc√™ est√° diante de um desafio, ser√° se voc√™ √© capaz? \nClique em OK ou aperte ENTER para continuar.');
    alert('√â √©poca de chocamento de drag√µes! Existe uma caverna n√£o muito longe daqui com 3 ovos no ninho. \nSeu objetivo ser√° capturar um dos ovos, mas detalhe, o drag√£o-f√™mea proteje o ninho quase o dia todo. \nAssim, voc√™ ter√° tr√™s hor√°rios espec√≠ficos (manh√£, tarde ou noite) para tentar o feito!');
    alert('Dicas: \nDependendo do hor√°rio ao longo do dia... \n01 - O drag√£o sai da caverna para se alimentar, mas volta r√°pido.\n02 - Os p√°ssaros fazem muito barulho, o drag√£o n√£o ouve bem os que adentram a caverna.\n03 - O drag√£o dorme, mas tem uma audi√ß√£o agu√ßada.');
    alert('OBS.: Existe somente um hor√°rio ideal para conseguir a captura do ovo, ent√£o preste aten√ß√£o nas dicas, ' + nomeguerreiro + '!');
    alert('Mais uma informa√ß√£o importante:\nVoc√™ possui 3 por√ß√µes de retorno. A quantidade pode variar (para mais ou para menos), dependendo de suas escolhas durante a jogatina.');
    alert('Mas o que √© por√ß√£o de retorno?');
    alert('As por√ß√µes de retorno s√£o como pequenas doses de viagem no tempo que o jogador pode usar. Quando voc√™ se encontra em uma situa√ß√£o desafiadora ou comete um erro, pode consumir uma dessas por√ß√µes para voltar atr√°s e corrigir sua a√ß√£o. √â como se voc√™ pudesse reescrever um momento do passado e tomar uma decis√£o diferente. Use-as com sabedoria, pois elas s√£o valiosas e limitadas! üï∞‚è≥');
    alert('Pronto para a aventura? \nClique em OK para fazer uma tentativa.');
}
/** ...
 * A fun√ß√£o perguntaEObriga obriga o jogador a digitar apenas uma das op√ßo·∫Ωs dispon√≠veis.
 * Retorna string: resposta
 */
function perguntaEObriga(pergunta, r1, r2, r3) {
    var _a, _b;
    let resposta = String((_a = prompt(pergunta)) === null || _a === void 0 ? void 0 : _a.trim().toLowerCase());
    while (resposta != r1 && resposta != r2 && resposta != r3) {
        alert('Resposta Inv√°lida');
        resposta = String((_b = prompt(pergunta)) === null || _b === void 0 ? void 0 : _b.trim().toLowerCase());
    }
    return resposta;
}
/** ...
 * A fun√ß√£o ajudarLobo √© respons√°vel por apresentar uma situa√ß√£o para o jogador e
 * dependendo de sua resposta(SIM) o usu√°rio ganhar√° uma recompensa. Tamb√©m obriga a digitar uma das op√ß√µes.
 * Retorna number tentativa.
 */
function ajudarLobo() {
    var _a;
    while (1) {
        let ajudarCachorro = String((_a = prompt('Durante o percurso at√© a caverna, ouviu-se um gemido baixo e sofrido que ecoou entre as √°rvores. Ao se aproximar voc√™ encontra uma criatura: um lobo preso em uma armadilha. Seu pelo cinza estava manchado de sangue e seus olhos amarelos estavam cheios de dor. Ajudar o lobo? \n- Sim \n- N√£o')) === null || _a === void 0 ? void 0 : _a.trim().toLowerCase());
        if (ajudarCachorro == "sim") {
            alert('Voc√™ ganhou uma recompensa! Por√ß√£o de retorno adicionada ao invent√°rio.');
            qporcoes += 1;
            alert('Agora, voc√™ posssui ' + (qporcoes - 1) + ' por√ß√µes de retorno, use com sabedoria.');
            return qporcoes;
        }
        else if (ajudarCachorro == "n√£o") {
            alert('Sua falta de compaix√£o com o pobre lobo fez voc√™ perder a chance de ganhar uma por√ß√£o de retorno. \nRepense sua atitudes, ' + nomeguerreiro + '!' + '\nQuantidade de por√ß√µes >>> ' + (qporcoes - 1));
            return qporcoes;
        }
        else {
            alert('VALOR INV√ÅLIDO!');
            continue;
        }
    }
}
/** ...
 * A fun√ß√£o escolherLocalDeRetorno √© respons√°vel por colocar o jogador, ap√≥s a sua morte, no local de desejo dele, desde que o mesmo
 * ainda possua alguma por√ß√£o de retorno dispon√≠vel. Obs: Ele precisa ter passado por esses locais antes. Apenas os locais j√° visitados
 * estar√£o dispon√≠veis para retorno.
 */
function escolherLocalDeRetorno() {
    while (1) {
        escolherTurno = perguntaEObriga('A sua morte acabou ativando a por√ß√£o de retorno! Escolha um ponto de retorno: \n- Manh√£ \n- Tarde \n- Noite', 'manh√£', 'tarde', 'noite');
        if (escolherTurno == 'manh√£') {
            controlarAcesso = 0;
            manha();
            return;
        }
        else if (escolherTurno == 'tarde') {
            tarde();
            return;
        }
        else if (escolherTurno == 'noite') {
            noite();
            return;
        }
        else {
            alert('RESPOSTA INV√ÅLIDA');
            continue;
        }
    }
}
/** ...
 * A fun√ß√£o tentarNovamente √© respons√°vel por perguntar ao jogador, ap√≥s perder todas
 * as suas chances, se ele deseja jogar novamente.
 */
function tentarNovamente() {
    var _a;
    continuar = String((_a = prompt('Tentar novamente? \n- Sim \n- N√£o')) === null || _a === void 0 ? void 0 : _a.trim().toLowerCase());
    if (continuar == 'sim') {
        controlarAcesso = 1;
        qporcoes = 4;
        DragonEgg();
        return;
    }
    else if (continuar == 'n√£o') {
        alert('Voc√™ desistiu!');
    }
    else {
        alert('VALOR INV√ÅLIDO!');
    }
}
/** ...
 * A fun√ß√£o verficarPorcoes √© respons√°vel por fazer a contagem das por√ß√µes dispon√≠veis e informar a quantidade.
 */
function verificarPorcoes() {
    if ((qporcoes - 1) == 0) {
        alert('Suas por√ß√µes de retorno acabaram!');
        alert('GAME OVER!!! \nVoc√™ n√£o tem mais por√ß√µes de retorno para continuar.');
        tentarNovamente();
        return;
    }
    else if ((qporcoes - 1) >= 1) {
        alert('Voc√™ ativou a por√ß√£o de retorno.');
        alert('Voc√™ possui ' + (qporcoes - 1) + ' por√ß√£o(√µes) de retorno!');
        escolherLocalDeRetorno();
        return;
    }
}
/** ...
 * A fun√ß√£o escolherOvo √© respons√°vel por ajudar o jogador a escolher um ovo e aprensentar os poss√≠veis resultados.
 * Existe apenas uma op√ß√£o certa(direita), por√©m essa op√ß√£o continua certa apenas no turno da tarde. Durante a noite todos s√£o
 * considerados errado. No turno da manh√£ existe esta op√ß√£o.
 */
function escolherOvo() {
    alert('Voc√™ chegou no ninho e est√° diante de tr√™s ovos. \nDois deles est√£o prestes a chocar e voc√™ n√£o vai querer um beb√™-drag√£o chamando a m√£e dele, n√£o √©? \nEscolha o ovo que n√£o vai chocar por agora e fuja o mais r√°pido poss√≠vel!');
    let ovoEscolher = perguntaEObriga('Escolha um ovo: \n- Esquerda \n- Meio \n- Direita', 'esquerda', 'meio', 'direita');
    if (ovoEscolher == 'esquerda') {
        alert('O ovo chocou assim que voc√™ encostou nele! \nGAME OVER!!!');
        qporcoes -= 1;
        verificarPorcoes();
        return;
    }
    else if (ovoEscolher == 'meio') {
        alert('O ovo estava prestes a chocar e voc√™ acelerou o processo! \nGAME OVER!!!');
        qporcoes -= 1;
        verificarPorcoes();
        return;
    }
    else if (ovoEscolher == 'direita') {
        if (escolherTurno == 'tarde') {
            alert('Voc√™ escolheu o ovo certo, a casca parece bem firme ainda, mas n√£o por muito tempo, corra!');
            //Finalizar jogo
            alert('PARAB√âNS!!! \nVoc√™ conseguiu sair da caverna a tempo, agora √© esperar o ovo chocar e ter assim a oportunidade de treinar o seu pr√≥prio drag√£o! \nEssa aventura acaba por aqui, mas a jornada continua, nos vemos em uma pr√≥xima, ' + nomeguerreiro + '!');
            return;
        }
        else if (escolherTurno == 'noite') {
            alert('O ovo estava prestes a chocar e voc√™ acelerou o processo! \nGAME OVER!!!');
            qporcoes -= 1;
            verificarPorcoes();
            return;
        }
    }
}
function manha() {
    var _a;
    alert('Voc√™ escolheu manh√£!');
    if (controlarAcesso == 1) {
        qporcoes = Number(ajudarLobo());
        controlarAcesso = 0;
    }
    let observar = 1;
    let desbloquear = 1;
    let esperar = 'sim';
    while (1) {
        let manhaEscolha1 = perguntaEObriga('Depois de um tempo caminhando, voc√™ chegou √† caverna. Escolha umas das op√ß√µes para avan√ßar: \n- Esperar \n- Entrar \n- Desistir', 'esperar', 'entrar', 'desistir');
        if (manhaEscolha1 == 'esperar') {
            alert('Esperando...');
            while (observar) {
                esperar = (_a = String(prompt('Continuar a esperar? \n- Sim \n- N√£o'))) === null || _a === void 0 ? void 0 : _a.trim().toLowerCase();
                if (esperar == 'sim') {
                    desbloquear += 1;
                    alert('Esperando...');
                    if (desbloquear == 3) {
                        alert('Ser√° se vai acontecer algo? \nDe qualquer forma, vov√≥ j√° dizia... \n"Quem espera sempre alcan√ßa!"');
                        continue;
                    }
                    if (desbloquear == 5) {
                        alert('GAME OVER!!! Uma cobra venenosa aproximou-se sem voc√™ perceber e acabou mordendo a sua perna.');
                        alert('Dica importante! \nN√£o adianta usar a por√ß√£o de retorno e tentar novamente por este caminho. Voc·∫Ω n√£o ser√° capaz de mudar este futuro.');
                        qporcoes -= 1;
                        verificarPorcoes();
                        return;
                    }
                }
                else if (esperar == 'n√£o') {
                    break;
                }
                else {
                    alert('Resposta inv√°lida. Tente novamente!');
                    continue;
                }
            }
            if (esperar == 'n√£o') {
                continue;
            }
        }
        else if (manhaEscolha1 == 'entrar') {
            alert('Voc√™ entrou na caverna e avistou o drag√£o, fique atento as pr√≥ximas a√ß√µes!');
            let escolhaNinho = perguntaEObriga('Escolha uma das op√ß√µes: \n- Caminhar \n- Correr \n- Voltar', 'caminhar', 'correr', 'voltar');
            if (escolhaNinho == 'correr' || escolhaNinho == 'caminhar') {
                alert('Parab√©ns!!! Voc√™ conseguiu chegar at√© o ninho. Mas deu de cara com o drag√£o. \nGAME OVER!!!');
                qporcoes -= 1;
                verificarPorcoes();
                return;
            }
            else if (escolhaNinho == 'voltar') {
                qporcoes -= 1;
                verificarPorcoes();
                return;
            }
        }
        else if (manhaEscolha1 == 'desistir') {
            return alert('Voc√™ desistiu!');
        }
        else {
            alert('Comando inv√°lido');
            continue;
        }
    }
}
function tarde() {
    var _a, _b;
    alert("Voc√™ escolheu tarde! Let's go!!!");
    let observar = 1;
    let desbloquear = 0;
    let esperar = 'sim';
    let repetidoText = 1;
    while (1) {
        if (repetidoText == 1) {
            alert('Depois de um tempo caminhando, voc√™ chegou √† caverna.');
            repetidoText = 0;
        }
        let tardeEscolha1 = (_a = perguntaEObriga('Escolha umas das op√ß√µes para avan√ßar: \n- Esperar \n- Entrar \n- Desistir', 'esperar', 'entrar', 'desistir')) === null || _a === void 0 ? void 0 : _a.toLowerCase();
        if (tardeEscolha1 == 'esperar') {
            while (observar) {
                esperar = (_b = String(prompt('Continuar a esperar? \n- Sim \n- N√£o'))) === null || _b === void 0 ? void 0 : _b.trim().toLowerCase();
                if (esperar == 'sim') {
                    desbloquear += 1;
                    alert('Esperando...');
                    if (desbloquear == 3) {
                        alert('Ser√° se vai acontecer algo? \nDe qualquer forma, vov√≥ j√° dizia... \n"Quem espera sempre alcan√ßa!"');
                        continue;
                    }
                    if (desbloquear == 5) {
                        alert('O drag√£o saiu, aproveite o momento, v√° at√© o ninho!');
                        let tardeEscolha2 = perguntaEObriga('Escolha uma das op√ß√µes antes que o drag√£o volte! \n- Correr \n- Caminhar \n- Agachar', 'correr', 'caminhar', 'agachar');
                        if (tardeEscolha2 == 'correr') {
                            alert('UFA! Voc√™ conseguiu chegar at√© o ninho! Clique em OK para continuar.');
                            escolherOvo();
                            return;
                        }
                        else if (tardeEscolha2 == 'caminhar') {
                            alert('GAME OVER!!! Lento demais!');
                            qporcoes -= 1;
                            verificarPorcoes();
                            return;
                        }
                        else if (tardeEscolha2 == 'agachar') {
                            alert('GAME OVER!!! Lento demais! O drag√£o voltou para o ninho.');
                            qporcoes -= 1;
                            verificarPorcoes();
                            return;
                        }
                    }
                }
                else if ((esperar === null || esperar === void 0 ? void 0 : esperar.toLowerCase()) == 'n√£o') {
                    break;
                }
                else {
                    alert('Resposta inv√°lida. Tente novamente!');
                }
            }
        }
        else if (tardeEscolha1 == 'entrar') {
            alert('Voc√™ entrou na caverna e avistou o drag√£o.');
            let escolhaNinho = perguntaEObriga('Escolha uma das op√ß√µes:\n- Caminhar \n- Correr \n- Voltar', 'caminhar', 'correr', 'voltar');
            if (escolhaNinho == 'correr' || escolhaNinho == 'caminhar') {
                alert('Parab√©ns!!! Voc√™ conseguiu chegar at√© o ninho, mas o drag√£o percebeu a sua presen√ßa! \nGAME OVER!!!');
                qporcoes -= 1;
                verificarPorcoes();
                return;
            }
            else if (escolhaNinho == 'voltar') {
                qporcoes -= 1;
                verificarPorcoes();
                return;
            }
        }
        else if (tardeEscolha1 == 'desistir') {
            return (alert('GAME OVER!!!'));
        }
        else {
            alert('Comando inv√°lido');
        }
    }
}
function noite() {
    var _a, _b;
    alert("Voc√™ escolheu noite! Let's go!!!");
    while (1) {
        let acenderTocha = String((_a = prompt('Hoje, a lua n√£o apareceu no c√©u... \nA escurid√£o reina nessa floresta m√°gica, ent√£o fique alerta! \nAcender uma tocha? \n- Sim \n- N√£o')) === null || _a === void 0 ? void 0 : _a.trim().toLowerCase());
        if (acenderTocha == 'n√£o') {
            alert('GAME OVER!!! Durante a noite, os monstros saem de seus escoderijos para se alimentar. Voc√™ precisa de algo para afugent√°-los.');
            qporcoes -= 1;
            verificarPorcoes();
            return;
        }
        else if (acenderTocha == 'sim') {
            let noiteEscolha1;
            alert('Boa escolha! O fogo de sua tocha foi o suficiente para afugentar os monstros. \nContinue o seu objetivo, v√° at√© a caverna.');
            let escolhaCaminhar = (_b = String(prompt('Ao chegar na caverna, voc√™ encontrou o ninho e o drag√£o. Voc√™ quer esperar? \n- Sim \n- N√£o'))) === null || _b === void 0 ? void 0 : _b.trim().toLowerCase();
            if (escolhaCaminhar == 'sim') {
                alert('O drag√£o escutou um estranho barulho no lado sul da caverna e foi averiguar o que era.');
                noiteEscolha1 = perguntaEObriga('Escolha uma das op√ß√µes antes que o drag√£o volte: \n- Caminhar \n- Correr \n- Agachar', 'caminhar', 'correr', 'agachar');
                if (noiteEscolha1 == 'correr') {
                    alert('Voc√™ conseguiu chegar at√© o ninho, escolha um ovo, r√°pido!');
                    escolherOvo();
                    return;
                }
                else if (noiteEscolha1 == 'caminhar') {
                    alert('Muito lento! O drag√£o voltou e voc√™ morreu! \nGAME OVER!!!');
                    qporcoes -= 1;
                    verificarPorcoes();
                    return;
                }
                else if (noiteEscolha1 == 'agachar') {
                    alert('Muito lento! O drag√£o voltou e voc√™ morreu! \nGAME OVER!!!');
                    qporcoes -= 1;
                    verificarPorcoes();
                    return;
                }
            }
            else if (escolhaCaminhar == 'n√£o') {
                noiteEscolha1 = perguntaEObriga('Escolha uma das op√ß√µes para avan√ßar: \n- Caminhar \n- Correr \n- Agachar', 'caminhar', 'correr', 'agachar');
                if (noiteEscolha1 == 'caminhar' || noiteEscolha1 == 'correr' || noiteEscolha1 == 'agachar') {
                    alert('Voc√™ morreu!!! Porque ser√°? \nGAME OVER!!!');
                    qporcoes -= 1;
                    verificarPorcoes();
                    return;
                }
            }
        }
        else {
            alert('RESPOSTA INV√ÅLIDA');
            continue;
        }
    }
}
function DragonEgg() {
    nomeGuerreiro();
    introducao();
    escolherTurno = perguntaEObriga('Aqui √© a sua principal escolha, pense bem e ent√£o decida os seus pr√≥ximos passos. \n- Manh√£ \n- Tarde \n- Noite', 'manh√£', 'tarde', 'noite');
    if (escolherTurno == 'manh√£') {
        manha();
        return;
    }
    else if (escolherTurno == 'tarde') {
        tarde();
        return;
    }
    else if (escolherTurno == 'noite') {
        noite();
        return;
    }
}
